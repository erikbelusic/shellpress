#!/bin/bash
#
# Script Name:   ShellPress
# Script URI:    https://github.com/erikbelusic/shellpress
# Author:        Erik Belusic
# Author URI:    http://erikbelusic.com
# Author github: https://github.com/erikbelusic
# Description:   This script will help get wordpress set up, quickly so you can
#                get right to development. Currently it targets local setups
#                with MAMP or similar solutiion.
# Version:       0.1.0
# License:       TBD
# License URI:




################################################################################
# Constant Definitions
################################################################################


# Get the location of shellpress
readonly BASEDIR=$(dirname $0)

# Get the users working directory
readonly RUN_DIR=$PWD




################################################################################
# Variable Definitions
################################################################################


# Import Configuration File
########################################
source ${BASEDIR}/shellpress.conf

# Self Reference imported variables
########################################
default_db_host="${default_db_host}"
default_db_username="${default_db_username}"
default_db_password="${default_db_password}"
global_mysql="${global_mysql}"
path_to_mysql="${path_to_mysql}"

# Define Symbols
########################################
symbol_check="✔" # check mark for affirmatives
symbol_cross="✘" # cross mark for negatives


# Installation check variables
########################################
curl_installed="false"
tar_installed="false"
global_mysql_installed="false"
specified_mysql_installed="false"
required_installed="false"




################################################################################
# Function Definitions
################################################################################


########################################
# Pipe an echo to me!
# Will string in a selected color
# Globals:
#   None
# Arguments:
#   ${1} [red][green][yellow][blue],
#		 [magenta][cyan]
#	${2} [bold]
# Returns:
#   None
# Examples:
#	echo "I will be red" | colorize red
#	echo "I will be bold blue" | colorize red bold
########################################
colorize(){
	if [[ ($# -ne 1) && ($# -ne 2) ]]; then
		cat
		return
	fi

	local red=`tput setaf 1`
	local green=`tput setaf 2`
	local yellow=`tput setaf 3`
	local blue=`tput setaf 4`
	local magenta=`tput setaf 5`
	local cyan=`tput setaf 6`
	local reset=`tput sgr0`
	local bold=""
	local color=\$${1:-reset}
	if [[ "${2}" == "bold" ]]; then
		bold=`tput bold`
	fi
	# Activate color passed as argument
	echo -ne "`eval echo ${color}${bold}`"
	# Read stdin (pipe) and print from it
	cat
	# Reset back to normal
	echo -ne "${reset}"
}


########################################
# Checks if cli program is exists
# echo "found" if global command line program installed, else missing
# Globals:
#   None
# Arguments:
#   ${1} string - cli program name
# Returns:
#   None
# Example:
#	echo "node: $(program_is_installed node)"
########################################
program_is_installed() {
  # set to 1 initially
  local return_="true"
  # set to 0 if not found
  type $1 >/dev/null 2>&1 || { local return_="false"; }
  # return value
  echo "$return_"
}


########################################
# Echos opening logo
# Globals:
#   colorize()
# Arguments:
#   None
# Returns:
#   None
########################################
shellpress_ascii_display() {
	echo "===========================================" | colorize magenta bold
	echo " __ _          _ _   ___                   " | colorize cyan bold
	echo "/ _\ |__   ___| | | / _ \_ __ ___  ___ ___ " | colorize cyan bold
	echo "\ \| '_ \ / _ \ | |/ /_)/ '__/ _ \/ __/ __|" | colorize cyan bold
	echo "_\ \ | | |  __/ | / ___/| | |  __/\__ \__ \\" | colorize cyan bold
	echo "\__/_| |_|\___|_|_\/    |_|  \___||___/___/" | colorize cyan bold
	echo "===========================================" | colorize magenta bold
}


########################################
# Checks for require programs for basic
# install
# Globals:
#   program_is_installed()
#	colorize()
#	symbol_check
#	symbol_cross
# Arguments:
#   ${1} program name
# Returns:
#   None
########################################
shellpress_check_required() {
	
	echo "checking for required programs" | colorize yellow
	
	curl_installed=$(program_is_installed curl)
	tar_installed=$(program_is_installed tar)
	global_mysql_installed=$(program_is_installed mysql)
	specified_mysql_installed=$(program_is_installed ${path_to_mysql})

	echo -n "curl: "
	if [[ "${curl_installed}" == true ]]; then
		echo "found ${symbol_check}" | colorize green
	else
		echo "missing ${symbol_cross}" | colorize red
	fi
	
	echo -n "tar: "
	if [[ "${tar_installed}" == true ]]; then
		echo "found ${symbol_check}" | colorize green
	else
		echo "missing ${symbol_cross}" | colorize red
	fi

	echo -n "global mysql: "
	if [[ "${global_mysql_installed}" == true ]]; then
		echo "found ${symbol_check}" | colorize green
	else
		echo "missing ${symbol_cross}" | colorize red
	fi

	echo -n "specified mysql: "
	if [[ "${specified_mysql_installed}" == true ]]; then
		echo "found ${symbol_check}" | colorize green
	else
		echo "missing ${symbol_cross}" | colorize red
	fi

	if [[ ("${curl_installed}" == "true") && ("${tar_installed}" == "true") ]]; then
		echo "we have curl and tar"
	fi
}

shellpress_check_required
exit



echo "${symbol_cross}" | colorize red
echo "${symbol_cross}" | colorize orange
echo "${symbol_cross}" | colorize 
echo "${symbol_check}" | colorize green
echo "${BASEDIR}"
echo "${RUN_DIR}"


exit







echo "${font_yellow}[SETTING]${font_reset} MySQL"

# Choose MYSQL path
if [[ $global_mysql == true ]]; then
	MYSQL_COMMAND="mysql"
else
	MYSQL_COMMAND="$path_to_mysql" 
fi

echo "${font_green}[COMPLETED]${font_reset} using $MYSQL_COMMAND"





#=============================================
# 2 - Directory Setup
#=============================================
# Check if an argument was passed
if [[ $1 ]] ; then
	# Save argument as the project name
	PROJECT_NAME=$1
else
	# Ask the user for the project name
	while [[ $PROJECT_NAME == "" ]]; do
		read -p "${font_cyan}[PROMPT]${font_reset} Enter Project Name: " PROJECT_NAME
	done
fi





echo "${font_yellow}[CREATING]${font_reset} project directory"

# Create directory at current location with project name
mkdir $PROJECT_NAME

echo "${font_green}[COMPLETED]${font_reset} created $PROJECT_NAME at path ${RUN_DIR}/${PROJECT_NAME}"





echo "${font_yellow}[CHANGING]${font_reset} into new project directory"

# Chang directory to the one we just created
cd $PROJECT_NAME

echo "${font_green}[COMPLETED]${font_reset} changed directory to ${RUN_DIR}/${PROJECT_NAME}"




#=============================================
# 3 - Download
#=============================================
echo "${font_yellow}[DOWNLOADING]${font_reset} latest release version of WordPress via https://wordpress.org/latest.tar.gz"

# Download wordpress
curl -O https://wordpress.org/latest.tar.gz

echo "${font_green}[COMPLETED]${font_reset} downloaded latest release version of WordPress"




#=============================================
# 4 - Extract
#=============================================
echo "${font_yellow}[EXTRACTING]${font_reset} WordPress"

# Extract WordPress
tar xfz latest.tar.gz

echo "${font_green}[COMPLETED]${font_reset} extracted WordPress"




#=============================================
# 5 - Move
#=============================================
echo "${font_yellow}[MOVING]${font_reset} WordPress to ${RUN_DIR}/${PROJECT_NAME}"

# Move WordPress files to project directory
mv wordpress/* ./

echo "${font_green}[COMPLETED]${font_reset} moved WordPress to ${RUN_DIR}/${PROJECT_NAME}"



#=============================================
# 6 - Store Config Info
#=============================================
# Prompt for db host
read -p "${font_cyan}[PROMPT]${font_reset} Enter Database Host: ${font_magenta}[${default_db_host}]${font_reset} " PROJECT_DB_HOST
if [[ $PROJECT_DB_HOST == "" ]]; then
	PROJECT_DB_HOST=$default_db_host
fi




# Prompt for db username
read -p "${font_cyan}[PROMPT]${font_reset} Enter Database Username: ${font_magenta}[${default_db_username}]${font_reset} " PROJECT_DB_USERNAME
if [[ $PROJECT_DB_USERNAME == "" ]]; then
	PROJECT_DB_USERNAME=$default_db_username
fi




# Prompt for db password
read -p "${font_cyan}[PROMPT]${font_reset} Enter Database Password: ${font_magenta}[${default_db_password}]${font_reset} " PROJECT_DB_PASSWORD
if [[ $PROJECT_DB_PASSWORD == "" ]]; then
	PROJECT_DB_PASSWORD=$default_db_password
fi




# Prompt for db name
read -p "${font_cyan}[PROMPT]${font_reset} Enter Database Name: ${font_magenta}[${PROJECT_NAME}]${font_reset} " PROJECT_DB_NAME
if [[ $PROJECT_DB_NAME == "" ]]; then
	PROJECT_DB_NAME=$PROJECT_NAME
fi




# Random prefix
default_table_prefix="sp_"$(date +%s | md5 | head -c 6)"_"
# Prompt for table prefix
read -p "${font_cyan}[PROMPT]${font_reset} Enter Table Prefix: ${font_magenta}[${default_table_prefix}]${font_reset} " PROJECT_TABLE_PREFIX
if [[ $PROJECT_TABLE_PREFIX == "" ]]; then
	PROJECT_TABLE_PREFIX=$default_table_prefix
fi





#=============================================
# 7 - Create Custom wp-config.php file
#=============================================
echo "<?php
/**
 * The base configurations of the WordPress.
 *
 * This file has the following configurations: MySQL settings, Table Prefix,
 * Secret Keys, WordPress Language, and ABSPATH. You can find more information
 * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing
 * wp-config.php} Codex page. You can get the MySQL settings from your web host.
 *
 * This file is used by the wp-config.php creation script during the
 * installation. You don't have to use the web site, you can just copy this file
 * to \"wp-config.php\" and fill in the values.
 *
 * @package WordPress
 */
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define('DB_NAME', '${PROJECT_DB_NAME}');
/** MySQL database username */
define('DB_USER', '${PROJECT_DB_USERNAME}');
/** MySQL database password */
define('DB_PASSWORD', '${PROJECT_DB_PASSWORD}');
/** MySQL hostname */
define('DB_HOST', '${PROJECT_DB_HOST}');
/** Database Charset to use in creating database tables. */
define('DB_CHARSET', 'utf8');
/** The Database Collate type. Don't change this if in doubt. */
define('DB_COLLATE', '');
/**#@+
 * Authentication Unique Keys and Salts.
 *
 * Change these to different unique phrases!
 * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
 * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
 *
 * @since 2.6.0
 */" > wp-config.php

curl https://api.wordpress.org/secret-key/1.1/salt/ > salts.txt
cat salts.txt >> wp-config.php

echo "/**#@-*/
/**
 * WordPress Database Table prefix.
 *
 * You can have multiple installations in one database if you give each a unique
 * prefix. Only numbers, letters, and underscores please!
 */
\$table_prefix  = '${PROJECT_TABLE_PREFIX}';
/**
 * WordPress Localized Language, defaults to English.
 *
 * Change this to localize WordPress.  A corresponding MO file for the chosen
 * language must be installed to wp-content/languages. For example, install
 * de.mo to wp-content/languages and set WPLANG to 'de' to enable German
 * language support.
 */
define ('WPLANG', '');
/**
 * For developers: WordPress debugging mode.
 *
 * Change this to true to enable the display of notices during development.
 * It is strongly recommended that plugin and theme developers use WP_DEBUG
 * in their development environments.
 */
define('WP_DEBUG', false);
/* That's all, stop editing! Happy blogging. */
/** Absolute path to the WordPress directory. */
if ( !defined('ABSPATH') )
	define('ABSPATH', dirname(__FILE__) . '/');
/** Sets up WordPress vars and included files. */
require_once(ABSPATH . 'wp-settings.php');" >> wp-config.php





#=============================================
# 8 - Create Database
#=============================================
$MYSQL_COMMAND --user=$PROJECT_DB_USERNAME --password=$PROJECT_DB_PASSWORD --host=$PROJECT_DB_HOST --execute="CREATE DATABASE \`$PROJECT_DB_NAME\`;"







#TODOS

#create wp-config file from sampe
#prompt user for values + prefix
#replace default values with entered values
#OPTIONAL - get salts from online and replace
#connect to mamp mysql
#create database with project name

#copy in any other files

#clean up





echo '========================================'
echo '|           Begining Cleanup           |'
echo '========================================'

rmdir ./wordpress/
rm -f latest.tar.gz
rm salts.txt

echo 'DONE.'